package ecs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeDeductConvertFactor invokes the ecs.DescribeDeductConvertFactor API synchronously
func (client *Client) DescribeDeductConvertFactor(request *DescribeDeductConvertFactorRequest) (response *DescribeDeductConvertFactorResponse, err error) {
	response = CreateDescribeDeductConvertFactorResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeDeductConvertFactorWithChan invokes the ecs.DescribeDeductConvertFactor API asynchronously
func (client *Client) DescribeDeductConvertFactorWithChan(request *DescribeDeductConvertFactorRequest) (<-chan *DescribeDeductConvertFactorResponse, <-chan error) {
	responseChan := make(chan *DescribeDeductConvertFactorResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeDeductConvertFactor(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeDeductConvertFactorWithCallback invokes the ecs.DescribeDeductConvertFactor API asynchronously
func (client *Client) DescribeDeductConvertFactorWithCallback(request *DescribeDeductConvertFactorRequest, callback func(response *DescribeDeductConvertFactorResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeDeductConvertFactorResponse
		var err error
		defer close(result)
		response, err = client.DescribeDeductConvertFactor(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeDeductConvertFactorRequest is the request struct for api DescribeDeductConvertFactor
type DescribeDeductConvertFactorRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer                  `position:"Query" name:"ResourceOwnerId"`
	StorageType          string                            `position:"Query" name:"StorageType"`
	Tag                  *[]DescribeDeductConvertFactorTag `position:"Query" name:"Tag"  type:"Repeated"`
	ResourceOwnerAccount string                            `position:"Query" name:"ResourceOwnerAccount"`
	PerformanceLevel     string                            `position:"Query" name:"PerformanceLevel"`
	OwnerAccount         string                            `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer                  `position:"Query" name:"OwnerId"`
}

// DescribeDeductConvertFactorTag is a repeated param struct in DescribeDeductConvertFactorRequest
type DescribeDeductConvertFactorTag struct {
	Key   string `name:"Key"`
	Value string `name:"Value"`
}

// DescribeDeductConvertFactorResponse is the response struct for api DescribeDeductConvertFactor
type DescribeDeductConvertFactorResponse struct {
	*responses.BaseResponse
	RequestId    string `json:"RequestId" xml:"RequestId"`
	Code         string `json:"Code" xml:"Code"`
	Message      string `json:"Message" xml:"Message"`
	DeductFactor string `json:"DeductFactor" xml:"DeductFactor"`
}

// CreateDescribeDeductConvertFactorRequest creates a request to invoke DescribeDeductConvertFactor API
func CreateDescribeDeductConvertFactorRequest() (request *DescribeDeductConvertFactorRequest) {
	request = &DescribeDeductConvertFactorRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ecs", "2014-05-26", "DescribeDeductConvertFactor", "ecs", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeDeductConvertFactorResponse creates a response to parse from DescribeDeductConvertFactor response
func CreateDescribeDeductConvertFactorResponse() (response *DescribeDeductConvertFactorResponse) {
	response = &DescribeDeductConvertFactorResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
