package ecs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeMaintenanceWindows invokes the ecs.DescribeMaintenanceWindows API synchronously
func (client *Client) DescribeMaintenanceWindows(request *DescribeMaintenanceWindowsRequest) (response *DescribeMaintenanceWindowsResponse, err error) {
	response = CreateDescribeMaintenanceWindowsResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeMaintenanceWindowsWithChan invokes the ecs.DescribeMaintenanceWindows API asynchronously
func (client *Client) DescribeMaintenanceWindowsWithChan(request *DescribeMaintenanceWindowsRequest) (<-chan *DescribeMaintenanceWindowsResponse, <-chan error) {
	responseChan := make(chan *DescribeMaintenanceWindowsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeMaintenanceWindows(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeMaintenanceWindowsWithCallback invokes the ecs.DescribeMaintenanceWindows API asynchronously
func (client *Client) DescribeMaintenanceWindowsWithCallback(request *DescribeMaintenanceWindowsRequest, callback func(response *DescribeMaintenanceWindowsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeMaintenanceWindowsResponse
		var err error
		defer close(result)
		response, err = client.DescribeMaintenanceWindows(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeMaintenanceWindowsRequest is the request struct for api DescribeMaintenanceWindows
type DescribeMaintenanceWindowsRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	PageNumber           requests.Integer `position:"Query" name:"PageNumber"`
	PageSize             requests.Integer `position:"Query" name:"PageSize"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	Level                string           `position:"Query" name:"Level"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	InstanceId           *[]string        `position:"Query" name:"InstanceId"  type:"Repeated"`
	PropertyId           *[]string        `position:"Query" name:"PropertyId"  type:"Repeated"`
}

// DescribeMaintenanceWindowsResponse is the response struct for api DescribeMaintenanceWindows
type DescribeMaintenanceWindowsResponse struct {
	*responses.BaseResponse
	RequestId            string               `json:"RequestId" xml:"RequestId"`
	TotalCount           int                  `json:"TotalCount" xml:"TotalCount"`
	PageNumber           int                  `json:"PageNumber" xml:"PageNumber"`
	PageSize             int                  `json:"PageSize" xml:"PageSize"`
	MaintenanceWindowSet MaintenanceWindowSet `json:"MaintenanceWindowSet" xml:"MaintenanceWindowSet"`
}

// CreateDescribeMaintenanceWindowsRequest creates a request to invoke DescribeMaintenanceWindows API
func CreateDescribeMaintenanceWindowsRequest() (request *DescribeMaintenanceWindowsRequest) {
	request = &DescribeMaintenanceWindowsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ecs", "2014-05-26", "DescribeMaintenanceWindows", "ecs", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeMaintenanceWindowsResponse creates a response to parse from DescribeMaintenanceWindows response
func CreateDescribeMaintenanceWindowsResponse() (response *DescribeMaintenanceWindowsResponse) {
	response = &DescribeMaintenanceWindowsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
