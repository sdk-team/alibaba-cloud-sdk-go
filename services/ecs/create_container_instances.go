package ecs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateContainerInstances invokes the ecs.CreateContainerInstances API synchronously
func (client *Client) CreateContainerInstances(request *CreateContainerInstancesRequest) (response *CreateContainerInstancesResponse, err error) {
	response = CreateCreateContainerInstancesResponse()
	err = client.DoAction(request, response)
	return
}

// CreateContainerInstancesWithChan invokes the ecs.CreateContainerInstances API asynchronously
func (client *Client) CreateContainerInstancesWithChan(request *CreateContainerInstancesRequest) (<-chan *CreateContainerInstancesResponse, <-chan error) {
	responseChan := make(chan *CreateContainerInstancesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateContainerInstances(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateContainerInstancesWithCallback invokes the ecs.CreateContainerInstances API asynchronously
func (client *Client) CreateContainerInstancesWithCallback(request *CreateContainerInstancesRequest, callback func(response *CreateContainerInstancesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateContainerInstancesResponse
		var err error
		defer close(result)
		response, err = client.CreateContainerInstances(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateContainerInstancesRequest is the request struct for api CreateContainerInstances
type CreateContainerInstancesRequest struct {
	*requests.RpcRequest
	ResourceOwnerId         requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ImageId                 string           `position:"Query" name:"ImageId"`
	InternetMaxBandwidthOut requests.Integer `position:"Query" name:"InternetMaxBandwidthOut"`
	SecurityGroupId         string           `position:"Query" name:"SecurityGroupId"`
	ResourceGroupId         string           `position:"Query" name:"ResourceGroupId"`
	InstanceType            string           `position:"Query" name:"InstanceType"`
	Amount                  requests.Integer `position:"Query" name:"Amount"`
	ResourceOwnerAccount    string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount            string           `position:"Query" name:"OwnerAccount"`
	OwnerId                 requests.Integer `position:"Query" name:"OwnerId"`
	VSwitchId               string           `position:"Query" name:"VSwitchId"`
	PodData                 string           `position:"Query" name:"PodData"`
	InternetMaxBandwidthIn  requests.Integer `position:"Query" name:"InternetMaxBandwidthIn"`
}

// CreateContainerInstancesResponse is the response struct for api CreateContainerInstances
type CreateContainerInstancesResponse struct {
	*responses.BaseResponse
	RequestId      string                                   `json:"RequestId" xml:"RequestId"`
	TaskId         string                                   `json:"TaskId" xml:"TaskId"`
	InstanceIdSets InstanceIdSetsInCreateContainerInstances `json:"InstanceIdSets" xml:"InstanceIdSets"`
}

// CreateCreateContainerInstancesRequest creates a request to invoke CreateContainerInstances API
func CreateCreateContainerInstancesRequest() (request *CreateContainerInstancesRequest) {
	request = &CreateContainerInstancesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ecs", "2014-05-26", "CreateContainerInstances", "ecs", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateContainerInstancesResponse creates a response to parse from CreateContainerInstances response
func CreateCreateContainerInstancesResponse() (response *CreateContainerInstancesResponse) {
	response = &CreateContainerInstancesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
