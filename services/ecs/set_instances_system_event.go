package ecs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// SetInstancesSystemEvent invokes the ecs.SetInstancesSystemEvent API synchronously
func (client *Client) SetInstancesSystemEvent(request *SetInstancesSystemEventRequest) (response *SetInstancesSystemEventResponse, err error) {
	response = CreateSetInstancesSystemEventResponse()
	err = client.DoAction(request, response)
	return
}

// SetInstancesSystemEventWithChan invokes the ecs.SetInstancesSystemEvent API asynchronously
func (client *Client) SetInstancesSystemEventWithChan(request *SetInstancesSystemEventRequest) (<-chan *SetInstancesSystemEventResponse, <-chan error) {
	responseChan := make(chan *SetInstancesSystemEventResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.SetInstancesSystemEvent(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// SetInstancesSystemEventWithCallback invokes the ecs.SetInstancesSystemEvent API asynchronously
func (client *Client) SetInstancesSystemEventWithCallback(request *SetInstancesSystemEventRequest, callback func(response *SetInstancesSystemEventResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *SetInstancesSystemEventResponse
		var err error
		defer close(result)
		response, err = client.SetInstancesSystemEvent(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// SetInstancesSystemEventRequest is the request struct for api SetInstancesSystemEvent
type SetInstancesSystemEventRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	NotBefore            string           `position:"Query" name:"NotBefore"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	InstanceId           *[]string        `position:"Query" name:"InstanceId"  type:"Repeated"`
	EventType            string           `position:"Query" name:"EventType"`
}

// SetInstancesSystemEventResponse is the response struct for api SetInstancesSystemEvent
type SetInstancesSystemEventResponse struct {
	*responses.BaseResponse
	RequestId  string                              `json:"RequestId" xml:"RequestId"`
	EventIdSet EventIdSetInSetInstancesSystemEvent `json:"EventIdSet" xml:"EventIdSet"`
}

// CreateSetInstancesSystemEventRequest creates a request to invoke SetInstancesSystemEvent API
func CreateSetInstancesSystemEventRequest() (request *SetInstancesSystemEventRequest) {
	request = &SetInstancesSystemEventRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ecs", "2014-05-26", "SetInstancesSystemEvent", "ecs", "openAPI")
	request.Method = requests.POST
	return
}

// CreateSetInstancesSystemEventResponse creates a response to parse from SetInstancesSystemEvent response
func CreateSetInstancesSystemEventResponse() (response *SetInstancesSystemEventResponse) {
	response = &SetInstancesSystemEventResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
