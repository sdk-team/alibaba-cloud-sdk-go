package sdk

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// Demo invokes the sdk.Demo API synchronously
// api document: https://help.aliyun.com/api/sdk/demo.html
func (client *Client) Demo(request *DemoRequest) (response *DemoResponse, err error) {
	response = CreateDemoResponse()
	err = client.DoAction(request, response)
	return
}

// DemoWithChan invokes the sdk.Demo API asynchronously
// api document: https://help.aliyun.com/api/sdk/demo.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DemoWithChan(request *DemoRequest) (<-chan *DemoResponse, <-chan error) {
	responseChan := make(chan *DemoResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.Demo(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DemoWithCallback invokes the sdk.Demo API asynchronously
// api document: https://help.aliyun.com/api/sdk/demo.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) DemoWithCallback(request *DemoRequest, callback func(response *DemoResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DemoResponse
		var err error
		defer close(result)
		response, err = client.Demo(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DemoRequest is the request struct for api Demo
type DemoRequest struct {
	*requests.RoaRequest
	Price       string             `position:"Query" name:"Price"`
	Name        string             `position:"Body" name:"Name"`
	ContentList *[]DemoContentList `position:"Body" name:"ContentList"  type:"Repeated"`
}

// DemoContentList is a repeated param struct in DemoRequest
type DemoContentList struct {
	Tag     string    `name:"Tag"`
	Letters *[]string `name:"Letters" type:"Repeated"`
}

// DemoResponse is the response struct for api Demo
type DemoResponse struct {
	*responses.BaseResponse
	RequestId string                   `json:"RequestId" xml:"RequestId"`
	TetMap    map[string]interface{}   `json:"TetMap" xml:"TetMap"`
	ListMap   []map[string]interface{} `json:"ListMap" xml:"ListMap"`
}

// CreateDemoRequest creates a request to invoke Demo API
func CreateDemoRequest() (request *DemoRequest) {
	request = &DemoRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("SDK", "2018-01-01", "Demo", "/helloworld", "", "")
	request.Method = requests.POST
	return
}

// CreateDemoResponse creates a response to parse from Demo response
func CreateDemoResponse() (response *DemoResponse) {
	response = &DemoResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
