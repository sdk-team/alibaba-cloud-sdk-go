package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// Add23 invokes the ft.Add23 API synchronously
// api document: https://help.aliyun.com/api/ft/add23.html
func (client *Client) Add23(request *Add23Request) (response *Add23Response, err error) {
	response = CreateAdd23Response()
	err = client.DoAction(request, response)
	return
}

// Add23WithChan invokes the ft.Add23 API asynchronously
// api document: https://help.aliyun.com/api/ft/add23.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) Add23WithChan(request *Add23Request) (<-chan *Add23Response, <-chan error) {
	responseChan := make(chan *Add23Response, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.Add23(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// Add23WithCallback invokes the ft.Add23 API asynchronously
// api document: https://help.aliyun.com/api/ft/add23.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) Add23WithCallback(request *Add23Request, callback func(response *Add23Response, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *Add23Response
		var err error
		defer close(result)
		response, err = client.Add23(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// Add23Request is the request struct for api Add23
type Add23Request struct {
	*requests.RoaRequest
}

// Add23Response is the response struct for api Add23
type Add23Response struct {
	*responses.BaseResponse
}

// CreateAdd23Request creates a request to invoke Add23 API
func CreateAdd23Request() (request *Add23Request) {
	request = &Add23Request{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("Ft", "2019-08-02", "Add23", "/add23", "", "")
	request.Method = requests.POST
	return
}

// CreateAdd23Response creates a response to parse from Add23 response
func CreateAdd23Response() (response *Add23Response) {
	response = &Add23Response{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
