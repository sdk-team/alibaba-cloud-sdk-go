package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// AddTest invokes the ft.AddTest API synchronously
// api document: https://help.aliyun.com/api/ft/addtest.html
func (client *Client) AddTest(request *AddTestRequest) (response *AddTestResponse, err error) {
	response = CreateAddTestResponse()
	err = client.DoAction(request, response)
	return
}

// AddTestWithChan invokes the ft.AddTest API asynchronously
// api document: https://help.aliyun.com/api/ft/addtest.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) AddTestWithChan(request *AddTestRequest) (<-chan *AddTestResponse, <-chan error) {
	responseChan := make(chan *AddTestResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.AddTest(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// AddTestWithCallback invokes the ft.AddTest API asynchronously
// api document: https://help.aliyun.com/api/ft/addtest.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) AddTestWithCallback(request *AddTestRequest, callback func(response *AddTestResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AddTestResponse
		var err error
		defer close(result)
		response, err = client.AddTest(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// AddTestRequest is the request struct for api AddTest
type AddTestRequest struct {
	*requests.RoaRequest
}

// AddTestResponse is the response struct for api AddTest
type AddTestResponse struct {
	*responses.BaseResponse
}

// CreateAddTestRequest creates a request to invoke AddTest API
func CreateAddTestRequest() (request *AddTestRequest) {
	request = &AddTestRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("Ft", "2019-08-02", "AddTest", "/addtest", "", "")
	request.Method = requests.POST
	return
}

// CreateAddTestResponse creates a response to parse from AddTest response
func CreateAddTestResponse() (response *AddTestResponse) {
	response = &AddTestResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
