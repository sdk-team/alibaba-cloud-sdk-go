package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetTairData invokes the ft.GetTairData API synchronously
// api document: https://help.aliyun.com/api/ft/gettairdata.html
func (client *Client) GetTairData(request *GetTairDataRequest) (response *GetTairDataResponse, err error) {
	response = CreateGetTairDataResponse()
	err = client.DoAction(request, response)
	return
}

// GetTairDataWithChan invokes the ft.GetTairData API asynchronously
// api document: https://help.aliyun.com/api/ft/gettairdata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetTairDataWithChan(request *GetTairDataRequest) (<-chan *GetTairDataResponse, <-chan error) {
	responseChan := make(chan *GetTairDataResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetTairData(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetTairDataWithCallback invokes the ft.GetTairData API asynchronously
// api document: https://help.aliyun.com/api/ft/gettairdata.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) GetTairDataWithCallback(request *GetTairDataRequest, callback func(response *GetTairDataResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetTairDataResponse
		var err error
		defer close(result)
		response, err = client.GetTairData(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetTairDataRequest is the request struct for api GetTairData
type GetTairDataRequest struct {
	*requests.RpcRequest
	Keys      *[]string `position:"Query" name:"Keys"  type:"Repeated"`
	CacheName string    `position:"Query" name:"CacheName"`
}

// GetTairDataResponse is the response struct for api GetTairData
type GetTairDataResponse struct {
	*responses.BaseResponse
	RequestId      string                 `json:"RequestId" xml:"RequestId"`
	Data           map[string]interface{} `json:"Data" xml:"Data"`
	Success        bool                   `json:"Success" xml:"Success"`
	Code           string                 `json:"Code" xml:"Code"`
	Message        string                 `json:"Message" xml:"Message"`
	ChineseMessage string                 `json:"ChineseMessage" xml:"ChineseMessage"`
	HttpStatusCode int                    `json:"HttpStatusCode" xml:"HttpStatusCode"`
}

// CreateGetTairDataRequest creates a request to invoke GetTairData API
func CreateGetTairDataRequest() (request *GetTairDataRequest) {
	request = &GetTairDataRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ft", "2018-07-13", "GetTairData", "", "")
	request.Method = requests.POST
	return
}

// CreateGetTairDataResponse creates a response to parse from GetTairData response
func CreateGetTairDataResponse() (response *GetTairDataResponse) {
	response = &GetTairDataResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
