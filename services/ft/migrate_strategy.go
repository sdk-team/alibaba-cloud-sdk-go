package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// MigrateStrategy invokes the ft.MigrateStrategy API synchronously
// api document: https://help.aliyun.com/api/ft/migratestrategy.html
func (client *Client) MigrateStrategy(request *MigrateStrategyRequest) (response *MigrateStrategyResponse, err error) {
	response = CreateMigrateStrategyResponse()
	err = client.DoAction(request, response)
	return
}

// MigrateStrategyWithChan invokes the ft.MigrateStrategy API asynchronously
// api document: https://help.aliyun.com/api/ft/migratestrategy.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) MigrateStrategyWithChan(request *MigrateStrategyRequest) (<-chan *MigrateStrategyResponse, <-chan error) {
	responseChan := make(chan *MigrateStrategyResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.MigrateStrategy(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// MigrateStrategyWithCallback invokes the ft.MigrateStrategy API asynchronously
// api document: https://help.aliyun.com/api/ft/migratestrategy.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) MigrateStrategyWithCallback(request *MigrateStrategyRequest, callback func(response *MigrateStrategyResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *MigrateStrategyResponse
		var err error
		defer close(result)
		response, err = client.MigrateStrategy(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// MigrateStrategyRequest is the request struct for api MigrateStrategy
type MigrateStrategyRequest struct {
	*requests.RpcRequest
	ApiName     string           `position:"Query" name:"apiName"`
	ProductName string           `position:"Query" name:"ProductName"`
	BucUid      requests.Integer `position:"Query" name:"BucUid"`
	BucName     string           `position:"Query" name:"BucName"`
	Env         string           `position:"Query" name:"Env"`
	BucEmpId    string           `position:"Query" name:"BucEmpId"`
	VersionName string           `position:"Query" name:"VersionName"`
}

// MigrateStrategyResponse is the response struct for api MigrateStrategy
type MigrateStrategyResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Success   bool   `json:"Success" xml:"Success"`
	Code      string `json:"Code" xml:"Code"`
	Message   string `json:"Message" xml:"Message"`
	MessageCN string `json:"MessageCN" xml:"MessageCN"`
	Data      bool   `json:"Data" xml:"Data"`
}

// CreateMigrateStrategyRequest creates a request to invoke MigrateStrategy API
func CreateMigrateStrategyRequest() (request *MigrateStrategyRequest) {
	request = &MigrateStrategyRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ft", "2018-07-13", "MigrateStrategy", "", "")
	request.Method = requests.POST
	return
}

// CreateMigrateStrategyResponse creates a response to parse from MigrateStrategy response
func CreateMigrateStrategyResponse() (response *MigrateStrategyResponse) {
	response = &MigrateStrategyResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
