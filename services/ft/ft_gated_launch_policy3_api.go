package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// FtGatedLaunchPolicy3Api invokes the ft.FtGatedLaunchPolicy3Api API synchronously
func (client *Client) FtGatedLaunchPolicy3Api(request *FtGatedLaunchPolicy3ApiRequest) (response *FtGatedLaunchPolicy3ApiResponse, err error) {
	response = CreateFtGatedLaunchPolicy3ApiResponse()
	err = client.DoAction(request, response)
	return
}

// FtGatedLaunchPolicy3ApiWithChan invokes the ft.FtGatedLaunchPolicy3Api API asynchronously
func (client *Client) FtGatedLaunchPolicy3ApiWithChan(request *FtGatedLaunchPolicy3ApiRequest) (<-chan *FtGatedLaunchPolicy3ApiResponse, <-chan error) {
	responseChan := make(chan *FtGatedLaunchPolicy3ApiResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.FtGatedLaunchPolicy3Api(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// FtGatedLaunchPolicy3ApiWithCallback invokes the ft.FtGatedLaunchPolicy3Api API asynchronously
func (client *Client) FtGatedLaunchPolicy3ApiWithCallback(request *FtGatedLaunchPolicy3ApiRequest, callback func(response *FtGatedLaunchPolicy3ApiResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *FtGatedLaunchPolicy3ApiResponse
		var err error
		defer close(result)
		response, err = client.FtGatedLaunchPolicy3Api(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// FtGatedLaunchPolicy3ApiRequest is the request struct for api FtGatedLaunchPolicy3Api
type FtGatedLaunchPolicy3ApiRequest struct {
	*requests.RpcRequest
	Name string `position:"Query" name:"Name"`
}

// FtGatedLaunchPolicy3ApiResponse is the response struct for api FtGatedLaunchPolicy3Api
type FtGatedLaunchPolicy3ApiResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
	Name      string `json:"Name" xml:"Name"`
}

// CreateFtGatedLaunchPolicy3ApiRequest creates a request to invoke FtGatedLaunchPolicy3Api API
func CreateFtGatedLaunchPolicy3ApiRequest() (request *FtGatedLaunchPolicy3ApiRequest) {
	request = &FtGatedLaunchPolicy3ApiRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ft", "2018-07-13", "FtGatedLaunchPolicy3Api", "", "")
	request.Method = requests.POST
	return
}

// CreateFtGatedLaunchPolicy3ApiResponse creates a response to parse from FtGatedLaunchPolicy3Api response
func CreateFtGatedLaunchPolicy3ApiResponse() (response *FtGatedLaunchPolicy3ApiResponse) {
	response = &FtGatedLaunchPolicy3ApiResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
