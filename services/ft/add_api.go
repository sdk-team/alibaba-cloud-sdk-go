package ft

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// AddApi invokes the ft.AddApi API synchronously
// api document: https://help.aliyun.com/api/ft/addapi.html
func (client *Client) AddApi(request *AddApiRequest) (response *AddApiResponse, err error) {
	response = CreateAddApiResponse()
	err = client.DoAction(request, response)
	return
}

// AddApiWithChan invokes the ft.AddApi API asynchronously
// api document: https://help.aliyun.com/api/ft/addapi.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) AddApiWithChan(request *AddApiRequest) (<-chan *AddApiResponse, <-chan error) {
	responseChan := make(chan *AddApiResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.AddApi(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// AddApiWithCallback invokes the ft.AddApi API asynchronously
// api document: https://help.aliyun.com/api/ft/addapi.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) AddApiWithCallback(request *AddApiRequest, callback func(response *AddApiResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AddApiResponse
		var err error
		defer close(result)
		response, err = client.AddApi(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// AddApiRequest is the request struct for api AddApi
type AddApiRequest struct {
	*requests.RoaRequest
	Ace string `position:"Query" name:"Ace"`
}

// AddApiResponse is the response struct for api AddApi
type AddApiResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateAddApiRequest creates a request to invoke AddApi API
func CreateAddApiRequest() (request *AddApiRequest) {
	request = &AddApiRequest{
		RoaRequest: &requests.RoaRequest{},
	}
	request.InitWithApiInfo("Ft", "2019-08-02", "AddApi", "/abc", "", "")
	request.Method = requests.POST
	return
}

// CreateAddApiResponse creates a response to parse from AddApi response
func CreateAddApiResponse() (response *AddApiResponse) {
	response = &AddApiResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
